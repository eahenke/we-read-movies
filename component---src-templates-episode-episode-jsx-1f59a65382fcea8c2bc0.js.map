{"version":3,"sources":["webpack:///./src/templates/episode/episode.module.css","webpack:///./src/components/links-discussed/links-discussed.module.css","webpack:///./src/components/layout/content-container/content-container.module.css","webpack:///./src/components/episode-cover/episode-cover.module.css","webpack:///./src/components/episode-cover/index.js","webpack:///./src/components/episode-cover/episode-cover.jsx","webpack:///./src/components/topics-discussed/index.js","webpack:///./src/components/topics-discussed/topics-discussed.jsx","webpack:///./src/components/links-discussed/index.js","webpack:///./src/components/links-discussed/links-discussed.jsx","webpack:///./src/templates/episode/episode.jsx","webpack:///./src/components/layout/content-container/content-container.jsx","webpack:///./src/components/layout/content-container/index.js"],"names":["module","exports","EpisodeCover","src","text","url","className","styles","episodeCoverContainer","episodeCover","fluid","attribution","href","TopicsDiscussed","topics","length","map","topic","idx","key","LinksDiscussed","links","cx","linksDiscussed","link","query","Episode","data","artistsJson","artistName","name","artistUrl","episodesJson","title","num","description","date","duration","cover","imageFluid","getFluidImage","image","meta","ContentContainer","children","contentContainer"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,MAAQ,+BAA+B,KAAO,gC,uBCAhED,EAAOC,QAAU,CAAC,eAAiB,mD,qBCAnCD,EAAOC,QAAU,CAAC,iBAAmB,uD,qBCArCD,EAAOC,QAAU,CAAC,sBAAwB,uDAAuD,aAAe,6CAA6C,YAAc,6C,0NCC5JC,ECKM,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAAd,OACjB,yBAAKC,UAAWC,IAAOC,uBACnB,yBAAKF,UAAWC,IAAOE,cACnB,kBAAC,IAAD,CAAOC,MAAOP,KAElB,kBAAC,IAAD,CAAKG,UAAWC,IAAOI,aAClBN,EAAM,kBAAC,IAAD,CAAcO,KAAMP,GAAMD,GAAuB,8BAAOA,M,6CCX5DS,ECCS,SAAC,GAAqB,IAAD,IAAlBC,cAAkB,MAAT,GAAS,EACzC,OAAKA,GAAWA,EAAOC,OAGnB,oCACI,uBAAGT,UAAU,qBAAb,oBACA,wBAAIA,UAAU,aACTQ,EAAOE,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAIC,IAAKD,GAAMD,QAPO,M,0CCF3BG,ECIQ,SAAC,GAAoB,IAAD,IAAjBC,aAAiB,MAAT,GAAS,EACvC,OAAKA,GAAUA,EAAMN,OAGjB,oCACI,uBAAGT,UAAU,qBAAb,mBACA,wBAAIA,UAAWgB,IAAG,YAAaf,IAAOgB,iBACjCF,EAAML,KAAI,SAACQ,EAAMN,GAAP,OACP,wBAAIC,IAAKD,GACL,kBAAC,IAAD,CAAcN,KAAMY,EAAKnB,KAAMmB,EAAKpB,KAAOoB,EAAKpB,KAAOoB,EAAKnB,WAR5C,M,wBCkC3BoB,EAAK,aAsBHC,UAhDC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACmBA,EAAKC,YAApCC,EADY,EAClBC,KAAuBC,EADL,EACA1B,IADA,EAE+DsB,EAAKK,aAAtFC,EAFkB,EAElBA,MAAOC,EAFW,EAEXA,IAAKC,EAFM,EAENA,YAAahC,EAFP,EAEOA,IAAKiC,EAFZ,EAEYA,KAAMC,EAFlB,EAEkBA,SAFlB,IAE4BvB,cAF5B,MAEqC,GAFrC,MAEyCO,aAFzC,MAEiD,GAFjD,EAEqDiB,EAFrD,EAEqDA,MACzEC,EAAaC,YAAcF,EAAMG,OAEvC,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKN,YAAaA,EAAaM,MAAOF,EAAWpC,IAAK8B,MAAK,WAAaC,EAAb,KAAqBD,IAChF,kBAAC,IAAD,KACI,wBAAI3B,UAAWC,IAAO0B,OAClB,kBAAC,IAAD,CAAcC,IAAKA,EAAKD,MAAOA,KAEnC,kBAAC,EAAD,CAAc9B,IAAKoC,EAAYnC,KAAMyB,EAAYxB,IAAK0B,IACtD,kBAAC,IAAD,CAAa5B,IAAKA,IAClB,yBAAKG,UAAWC,IAAOmC,MACnB,0BAAMpC,UAAWC,IAAO6B,MAAOA,GAC/B,0BAAM9B,UAAWC,IAAO8B,UAAxB,aAA6CA,IAEjD,2BAAIF,GACJ,kBAAC,EAAD,CAAiBrB,OAAQA,IACzB,kBAAC,EAAD,CAAgBO,MAAOA,Q,gFCzBxBsB,EANU,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,yBAAKtC,UAAWC,IAAOsC,kBAAmBD,ICFtED","file":"component---src-templates-episode-episode-jsx-1f59a65382fcea8c2bc0.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"episode-module--title--iS1g1\",\"meta\":\"episode-module--meta--1cAco\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"linksDiscussed\":\"links-discussed-module--links-discussed--3fTaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentContainer\":\"content-container-module--content-container--2hDQu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"episodeCoverContainer\":\"episode-cover-module--episode-cover-container--2yeEi\",\"episodeCover\":\"episode-cover-module--episode-cover--2Pd_L\",\"attribution\":\"episode-cover-module--attribution--CHzil\"};","import EpisodeCover from './episode-cover';\n\nexport default EpisodeCover;\n","import React from 'react';\nimport { string, shape } from 'prop-types';\nimport Image from 'gatsby-image';\nimport ExternalLink from '../navigation/external-link';\nimport Box from '../layout/box';\nimport styles from './episode-cover.module.css';\n\nconst EpisodeCover = ({ src, text, url }) => (\n    <div className={styles.episodeCoverContainer}>\n        <div className={styles.episodeCover}>\n            <Image fluid={src} />\n        </div>\n        <Box className={styles.attribution}>\n            {url ? <ExternalLink href={url}>{text}</ExternalLink> : <span>{text}</span>}\n        </Box>\n    </div>\n);\n\nEpisodeCover.propTypes = {\n    // TODO: src fix prop type\n    src: shape({}).isRequired,\n    text: string.isRequired,\n    url: string\n};\n\nexport default EpisodeCover;\n","import TopicsDiscussed from './topics-discussed';\n\nexport default TopicsDiscussed;\n","import React from 'react';\nimport { arrayOf, string } from 'prop-types';\n\nconst TopicsDiscussed = ({ topics = [] }) => {\n    if (!topics || !topics.length) return null;\n\n    return (\n        <>\n            <p className=\"paragraph-heading\">Topics Discussed</p>\n            <ul className=\"body-text\">\n                {topics.map((topic, idx) => (\n                    <li key={idx}>{topic}</li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nTopicsDiscussed.propTypes = {\n    topics: arrayOf(string)\n};\n\nexport default TopicsDiscussed;\n","import LinksDiscussed from './links-discussed';\n\nexport default LinksDiscussed;\n","import React from 'react';\nimport { arrayOf, shape, string } from 'prop-types';\nimport cx from 'classnames';\nimport ExternalLink from '../navigation/external-link';\nimport styles from './links-discussed.module.css';\n\nconst LinksDiscussed = ({ links = [] }) => {\n    if (!links || !links.length) return null;\n\n    return (\n        <>\n            <p className=\"paragraph-heading\">Links Discussed</p>\n            <ul className={cx('body-text', styles.linksDiscussed)}>\n                {links.map((link, idx) => (\n                    <li key={idx}>\n                        <ExternalLink href={link.url}>{link.text ? link.text : link.url}</ExternalLink>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nLinksDiscussed.propTypes = {\n    links: arrayOf(\n        shape({\n            text: string,\n            url: string\n        })\n    )\n};\n\nexport default LinksDiscussed;\n","import React from 'react';\nimport { shape, string } from 'prop-types';\nimport { graphql } from 'gatsby';\nimport { episodePropType } from '../../prop-types';\nimport PageLayout from '../../components/page-layout';\nimport EpisodeTitle from '../../components/episode-title';\nimport EpisodeCover from '../../components/episode-cover';\nimport AudioPlayer from '../../components/media/audio-player';\nimport ContentContainer from '../../components/layout/content-container';\nimport styles from './episode.module.css';\nimport TopicsDiscussed from '../../components/topics-discussed';\nimport LinksDiscussed from '../../components/links-discussed';\nimport Seo from '../../components/seo';\nimport { getFluidImage } from '../../util';\n\nconst Episode = ({ data }) => {\n    const { name: artistName, url: artistUrl } = data.artistsJson;\n    const { title, num, description, src, date, duration, topics = [], links = [], cover } = data.episodesJson;\n    const imageFluid = getFluidImage(cover.image);\n\n    return (\n        <PageLayout>\n            <Seo description={description} image={imageFluid.src} title={`Episode ${num}: ${title}`} />\n            <ContentContainer>\n                <h1 className={styles.title}>\n                    <EpisodeTitle num={num} title={title} />\n                </h1>\n                <EpisodeCover src={imageFluid} text={artistName} url={artistUrl} />\n                <AudioPlayer src={src} />\n                <div className={styles.meta}>\n                    <span className={styles.date}>{date}</span>\n                    <span className={styles.duration}>Duration: {duration}</span>\n                </div>\n                <p>{description}</p>\n                <TopicsDiscussed topics={topics} />\n                <LinksDiscussed links={links} />\n            </ContentContainer>\n        </PageLayout>\n    );\n};\n\nexport const query = graphql`\n    query EpisodeWithCover($slug: String!, $artist: String) {\n        episodesJson(slug: { eq: $slug }) {\n            ...episodeFullFragment\n        }\n        artistsJson(name: { eq: $artist }) {\n            name\n            url\n        }\n    }\n`;\n\nEpisode.propTypes = {\n    data: shape({\n        episodesJson: shape(episodePropType),\n        artistJson: shape({\n            name: string,\n            url: string\n        })\n    })\n};\n\nexport default Episode;\n","import React from 'react';\nimport { node } from 'prop-types';\nimport styles from './content-container.module.css';\n\nconst ContentContainer = ({ children }) => <div className={styles.contentContainer}>{children}</div>;\n\nContentContainer.propTypes = {\n    children: node.isRequired\n};\n\nexport default ContentContainer;\n","import ContentContainer from './content-container';\n\nexport default ContentContainer;\n"],"sourceRoot":""}