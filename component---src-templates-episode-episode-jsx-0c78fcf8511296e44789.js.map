{"version":3,"sources":["webpack:///./src/templates/episode/episode.module.css","webpack:///./src/components/links-discussed/links-discussed.module.css","webpack:///./src/components/layout/content-container/content-container.module.css","webpack:///./src/components/topics-discussed/index.js","webpack:///./src/components/topics-discussed/topics-discussed.jsx","webpack:///./src/components/links-discussed/index.js","webpack:///./src/components/links-discussed/links-discussed.jsx","webpack:///./src/templates/episode/episode.jsx","webpack:///./src/components/layout/content-container/content-container.jsx","webpack:///./src/components/layout/content-container/index.js"],"names":["module","exports","TopicsDiscussed","topics","length","className","map","topic","idx","key","LinksDiscussed","links","cx","styles","linksDiscussed","link","href","url","text","Episode","data","artistsJson","artistName","name","artistUrl","episodesJson","title","num","description","src","date","duration","cover","slug","imageFluid","getFluidImage","image","imageBanner","getBannerImage","path","main","meta","ContentContainer","children","contentContainer"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,MAAQ,+BAA+B,KAAO,gC,uBCAhED,EAAOC,QAAU,CAAC,eAAiB,mD,qBCAnCD,EAAOC,QAAU,CAAC,iBAAmB,uD,iKCCtBC,ECCS,SAAH,GAAyB,IAAD,IAAlBC,cAAM,MAAG,GAAE,EAClC,OAAKA,GAAWA,EAAOC,OAGnB,oCACI,uBAAGC,UAAU,qBAAmB,oBAChC,wBAAIA,UAAU,aACTF,EAAOG,KAAI,SAACC,EAAOC,GAAG,OACnB,wBAAIC,IAAKD,GAAMD,QAPO,M,sDCF3BG,ECIQ,SAAH,GAAwB,IAAD,IAAjBC,aAAK,MAAG,GAAE,EAChC,OAAKA,GAAUA,EAAMP,OAGjB,oCACI,uBAAGC,UAAU,qBAAmB,mBAChC,wBAAIA,UAAWO,IAAG,YAAaC,IAAOC,iBACjCH,EAAML,KAAI,SAACS,EAAMP,GAAG,OACjB,wBAAIC,IAAKD,GACL,kBAAC,IAAY,CAACQ,KAAMD,EAAKE,KAAMF,EAAKG,KAAOH,EAAKG,KAAOH,EAAKE,WAR5C,M,wBC0DzBE,UAlDC,SAAH,GAAkB,IAAZC,EAAI,EAAJA,KACf,EAA6CA,EAAKC,aAAe,GAAnDC,EAAU,EAAhBC,KAAuBC,EAAS,EAAdP,IAC1B,EAA+FG,EAAKK,aAA5FC,EAAK,EAALA,MAAOC,EAAG,EAAHA,IAAKC,EAAW,EAAXA,YAAaC,EAAG,EAAHA,IAAKC,EAAI,EAAJA,KAAMC,EAAQ,EAARA,SAAS,EAAD,EAAE5B,cAAM,MAAG,GAAE,MAAEQ,aAAK,MAAG,GAAE,EAAEqB,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAChFC,EAAaC,YAAcH,aAAK,EAALA,EAAOI,OAClCC,EAAcC,YAAeN,aAAK,EAALA,EAAOI,OACpCG,EAAI,aAAgBN,EAE1B,OACI,kBAAC,IAAU,KACP,kBAAC,IAAG,CAACL,YAAaA,EAAaQ,MAAOC,EAAaE,KAAMA,EAAMb,MAAK,WAAaC,EAAG,KAAKD,IACzF,wBAAIrB,UAAWQ,IAAOa,OAClB,kBAAC,IAAY,CAACC,IAAKA,EAAKD,MAAOA,KAEnC,kBAAC,IAAY,CAACc,MAAM,EAAMX,IAAKK,EAAYhB,KAAMI,EAAYL,IAAKO,IAClE,kBAAC,IAAgB,KACb,kBAAC,IAAW,CAACO,SAAUA,EAAUF,IAAKA,IACtC,yBAAKxB,UAAWQ,IAAO4B,MACnB,0BAAMpC,UAAWQ,IAAOiB,MAAOA,GAC/B,0BAAMzB,UAAWQ,IAAOkB,UAAS,aAAYA,IAEjD,2BAAIH,GACJ,kBAAC,EAAe,CAACzB,OAAQA,IACzB,kBAAC,EAAc,CAACQ,MAAOA,Q,gFC3BxB+B,EANU,SAAH,OAAMC,EAAQ,EAARA,SAAQ,OAAO,yBAAKtC,UAAWQ,IAAO+B,kBAAmBD,ICFtED","file":"component---src-templates-episode-episode-jsx-0c78fcf8511296e44789.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"episode-module--title--iS1g1\",\"meta\":\"episode-module--meta--1cAco\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"linksDiscussed\":\"links-discussed-module--links-discussed--3fTaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentContainer\":\"content-container-module--content-container--2hDQu\"};","import TopicsDiscussed from './topics-discussed';\n\nexport default TopicsDiscussed;\n","import React from 'react';\nimport { arrayOf, string } from 'prop-types';\n\nconst TopicsDiscussed = ({ topics = [] }) => {\n    if (!topics || !topics.length) return null;\n\n    return (\n        <>\n            <p className=\"paragraph-heading\">Topics Discussed</p>\n            <ul className=\"body-text\">\n                {topics.map((topic, idx) => (\n                    <li key={idx}>{topic}</li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nTopicsDiscussed.propTypes = {\n    topics: arrayOf(string)\n};\n\nexport default TopicsDiscussed;\n","import LinksDiscussed from './links-discussed';\n\nexport default LinksDiscussed;\n","import React from 'react';\nimport { arrayOf, shape, string } from 'prop-types';\nimport cx from 'classnames';\nimport ExternalLink from '../navigation/external-link';\nimport styles from './links-discussed.module.css';\n\nconst LinksDiscussed = ({ links = [] }) => {\n    if (!links || !links.length) return null;\n\n    return (\n        <>\n            <p className=\"paragraph-heading\">Links Discussed</p>\n            <ul className={cx('body-text', styles.linksDiscussed)}>\n                {links.map((link, idx) => (\n                    <li key={idx}>\n                        <ExternalLink href={link.url}>{link.text ? link.text : link.url}</ExternalLink>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nLinksDiscussed.propTypes = {\n    links: arrayOf(\n        shape({\n            text: string,\n            url: string\n        })\n    )\n};\n\nexport default LinksDiscussed;\n","import React from 'react';\nimport { shape, string } from 'prop-types';\nimport { graphql } from 'gatsby';\nimport { episodePropType } from '../../prop-types';\nimport PageLayout from '../../components/page-layout';\nimport EpisodeTitle from '../../components/episode-title';\nimport EpisodeCover from '../../components/episode-cover';\nimport AudioPlayer from '../../components/media/audio-player';\nimport ContentContainer from '../../components/layout/content-container';\nimport styles from './episode.module.css';\nimport TopicsDiscussed from '../../components/topics-discussed';\nimport LinksDiscussed from '../../components/links-discussed';\nimport Seo from '../../components/seo';\nimport { getFluidImage, getBannerImage } from '../../util';\n\nconst Episode = ({ data }) => {\n    const { name: artistName, url: artistUrl } = data.artistsJson || {};\n    const { title, num, description, src, date, duration, topics = [], links = [], cover, slug } = data.episodesJson;\n    const imageFluid = getFluidImage(cover?.image);\n    const imageBanner = getBannerImage(cover?.image);\n    const path = `/episodes/${slug}`;\n\n    return (\n        <PageLayout>\n            <Seo description={description} image={imageBanner} path={path} title={`Episode ${num}: ${title}`} />\n            <h1 className={styles.title}>\n                <EpisodeTitle num={num} title={title} />\n            </h1>\n            <EpisodeCover main={true} src={imageFluid} text={artistName} url={artistUrl} />\n            <ContentContainer>\n                <AudioPlayer duration={duration} src={src} />\n                <div className={styles.meta}>\n                    <span className={styles.date}>{date}</span>\n                    <span className={styles.duration}>Duration: {duration}</span>\n                </div>\n                <p>{description}</p>\n                <TopicsDiscussed topics={topics} />\n                <LinksDiscussed links={links} />\n            </ContentContainer>\n        </PageLayout>\n    );\n};\n\nexport const query = graphql`\n    query EpisodeWithCover($slug: String!, $artist: String) {\n        episodesJson(slug: { eq: $slug }) {\n            ...episodeFullFragment\n        }\n        artistsJson(name: { eq: $artist }) {\n            name\n            url\n        }\n    }\n`;\n\nEpisode.propTypes = {\n    data: shape({\n        episodesJson: shape(episodePropType),\n        artistJson: shape({\n            name: string,\n            url: string\n        })\n    })\n};\n\nexport default Episode;\n","import React from 'react';\nimport { node } from 'prop-types';\nimport styles from './content-container.module.css';\n\nconst ContentContainer = ({ children }) => <div className={styles.contentContainer}>{children}</div>;\n\nContentContainer.propTypes = {\n    children: node.isRequired\n};\n\nexport default ContentContainer;\n","import ContentContainer from './content-container';\n\nexport default ContentContainer;\n"],"sourceRoot":""}